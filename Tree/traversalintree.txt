Tree Traversals

Depth First Traversals:
(a) Inorder
(b) Preorder
(c) Postorder


Inorder Traversal:

Algorithm Inorder(tree)
   1. Traverse the left subtree, i.e., call Inorder(left-subtree)
   2. Visit the root.
   3. Traverse the right subtree, i.e., call Inorder(right-subtree)


Preorder Traversal:

Algorithm Preorder(tree)
   1. Visit the root.
   2. Traverse the left subtree, i.e., call Preorder(left-subtree)
   3. Traverse the right subtree, i.e., call Preorder(right-subtree)



Postorder Traversal:

Algorithm Postorder(tree)
   1. Traverse the left subtree, i.e., call Postorder(left-subtree)
   2. Traverse the right subtree, i.e., call Postorder(right-subtree)
   3. Visit the root.



c++  code:

#include <stdio.h>
#include<stdlib.h>

struct node
{
	int data;
	struct node *left;
	struct node *right;
};

struct node *newnode(int data)
{
	struct node *newNode=(struct node*)malloc(sizeof(struct node*));
	newNode->data=data;
	newNode->left=NULL;
	newNode->right=NULL;
	return (newNode);
}

//peorder traversal
void preorder(struct node *Node)
{ if(Node==NULL)
     return;
	
	printf("%d ",Node->data);
	preorder(Node->left);
	preorder(Node->right);
}
//postorder traversal
void postorder(struct node *Node)
{ 
	if(Node==NULL)
         return ;
	
    postorder(Node->left);
	postorder(Node->right);
	
   	printf("%d ",Node->data);
}
//inorder traversal
void inorder(struct node *Node)
{ 
	if(Node==NULL)
      return;
	
	inorder(Node->left);
    printf("%d ",Node->data);
	inorder(Node->right);
}
int main(void) {
	struct node *head=newnode(1);
	head->left=newnode(2);
	head->right=newnode(3);
	head->left->left=newnode(4);
	head->left->right=newnode(5);
	
	printf("print in postoreder traversal in tree\n ");
	postorder(head);
	printf("\nprint in inorder traversal in tree\n");
	inorder(head);
	printf("\nprint in preoder traversal in tree\n");
	preorder(head);
	return 0;
}
